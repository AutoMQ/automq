plugins {
  id 'application'
  id 'checkstyle'
  id('com.google.protobuf') version '0.9.4'
}

project(':opentelemetry') {
  archivesBaseName="opentelemetry"
}

repositories {
  mavenCentral()
}

dependencies {
  // OpenTelemetry core dependencies
  api libs.opentelemetryJava8
  api libs.opentelemetryOshi
  api libs.opentelemetrySdk
  api libs.opentelemetrySdkMetrics
  api libs.opentelemetryExporterLogging
  api libs.opentelemetryExporterProm
  api libs.opentelemetryExporterOTLP
  api libs.opentelemetryJmx

  // Logging dependencies
  api libs.slf4jApi
  api libs.slf4jBridge  // 添加 SLF4J Bridge 依赖
  api libs.reload4j

  api libs.commonLang

  // Yammer metrics (for integration)
  api 'com.yammer.metrics:metrics-core:2.2.0'

  implementation(project(':s3stream')) {
    exclude(group: 'io.opentelemetry', module: '*')
    exclude(group: 'io.opentelemetry.instrumentation', module: '*')
    exclude(group: 'io.opentelemetry.proto', module: '*')
    exclude(group: 'io.netty', module: 'netty-tcnative-boringssl-static')
    exclude(group: 'com.github.jnr', module: '*')
    exclude(group: 'org.aspectj', module: '*')
    exclude(group: 'net.java.dev.jna', module: '*')
    exclude(group: 'net.sourceforge.argparse4j', module: '*')
    exclude(group: 'com.bucket4j', module: '*')
    exclude(group: 'com.yammer.metrics', module: '*')
    exclude(group: 'com.github.spotbugs', module: '*')
    exclude(group: 'org.apache.kafka.shaded', module: '*')
  }
  implementation libs.nettyBuffer
  implementation libs.nettyBuffer
  implementation libs.jacksonDatabind
  implementation libs.guava
  implementation project(':clients')

  // Test dependencies
  testImplementation libs.junitJupiter
  testImplementation libs.mockitoCore
  testImplementation libs.slf4jReload4j

  testRuntimeOnly libs.junitPlatformLanucher

  implementation('io.opentelemetry:opentelemetry-sdk:1.40.0')
  implementation("io.opentelemetry.semconv:opentelemetry-semconv:1.25.0-alpha")
  implementation("io.opentelemetry.instrumentation:opentelemetry-runtime-telemetry-java8:2.6.0-alpha")
  implementation('com.google.protobuf:protobuf-java:3.25.5')
  implementation('org.xerial.snappy:snappy-java:1.1.10.5')

}

task createVersionFile() {
  def receiptFile = file("$buildDir/kafka/$buildVersionFileName")
  inputs.property "commitId", commitId
  inputs.property "version", version
  outputs.file receiptFile

  doLast {
    def data = [
      commitId: commitId,
      version: version,
    ]

    receiptFile.parentFile.mkdirs()
    def content = data.entrySet().collect { "$it.key=$it.value" }.sort().join("\n")
    receiptFile.setText(content, "ISO-8859-1")
  }
}

jar {
  dependsOn createVersionFile
  from("$buildDir") {
    include "kafka/$buildVersionFileName"
  }
}

clean.doFirst {
  delete "$buildDir/kafka/"
}

checkstyle {
  configProperties=checkstyleConfigProperties("import-control-server.xml")
}

javadoc {
  enabled=false
}
