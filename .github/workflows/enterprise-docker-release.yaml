name: Enterprise Docker Release

on:
    workflow_call:
        inputs:
            uploadToRelease:
                required: true
                default: false
                type: boolean
            env:
                required: true
                default: Test
                type: string
    workflow_dispatch:
        inputs:
            uploadToRelease:
                description: 'Upload Result to Release'
                required: true
                default: false
                type: boolean
            env:
                description: 'Environment'
                required: true
                default: Test
                type: choice
                options:
                    - Test
                    - Prod

jobs:
    docker-release:
        name: Docker Image Release
        strategy:
            matrix:
                platform: [ "ubuntu-22.04" ]
                jdk: ["17"]
                registry: ["automq-docker-registry-registry.cn-hangzhou.cr.aliyuncs.com"]
        runs-on: ${{ matrix.platform }}
        permissions:
            contents: write
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Set up JDK ${{ matrix.jdk }}
              uses: actions/setup-java@v3
              with:
                  java-version: ${{ matrix.jdk }}
                  distribution: "zulu"
            - name: Setup Gradle
              uses: gradle/gradle-build-action@v2.12.0
            - name: Build TarGz
              run: |
                  ./gradlew releaseTarGz

            # docker image release
            - name: Cp TarGz to Docker Path
              run: |
                  cp ./build/distributions/automq-kafka-enterprise_*.tgz ./enterprise-chart/
            - name: Determine Image Tags
              id: image_tags
              run: |
                  LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
                  TIMESTAMP=$(date +%Y%m%d%H%M%S)
                  echo "LATEST_TAG=${LATEST_TAG}"

                  if [ ${{ inputs.env }} == "Prod" ]; then
                    echo "file=Dockerfile" >> $GITHUB_OUTPUT
                    if [ "$LATEST_TAG" == "${{ github.ref_name }}" ]; then
                      echo "tags=${{ matrix.registry }}/automq/automq-enterprise:${{ github.ref_name }}, ${{ matrix.registry }}/automq/automq-enterprise:latest" >> $GITHUB_OUTPUT
                    else
                      echo "tags=${{ matrix.registry }}/automq/automq-enterprise:${{ github.ref_name }}" >> $GITHUB_OUTPUT
                    fi
                    echo "image_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
                  else
                    echo "file=marathon.Dockerfile" >> $GITHUB_OUTPUT
                    echo "tags=${{ matrix.registry }}/automq/automq-enterprise:${{ github.ref_name }}-${TIMESTAMP}" >> $GITHUB_OUTPUT
                    echo "image_tag=${{ github.ref_name }}-${TIMESTAMP}" >> $GITHUB_OUTPUT
                  fi

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  registry: ${{ matrix.registry }}
                  username: ${{ secrets.ALIYUN_DOCKER_REGISTRY_USERNAME }}
                  password: ${{ secrets.ALIYUN_DOCKER_REGISTRY_PASSWORD }}
            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: ./enterprise-chart
                  file: enterprise-chart/${{ steps.image_tags.outputs.file }}
                  push: true
                  tags: ${{ steps.image_tags.outputs.tags }}
                  platforms: linux/amd64,linux/arm64

            - name: Output Artifact ID
              if: ${{ inputs.uploadToRelease }}
              run: |
                  cd ./enterprise-chart
                  touch docker_image_tag_${{ steps.image_tags.outputs.image_tag }}.json
                  echo "{"tag": "${{ steps.image_tags.outputs.image_tag }}"}" > docker_image_tag_${{ steps.image_tags.outputs.image_tag }}.json

            - name: Update Release
              if: ${{ inputs.uploadToRelease }}
              uses: ncipollo/release-action@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  name: AutoMQ Kafka Enterprise ${{ github.ref_name }}-branch-build
                  tag: ${{ github.ref_name }}-branch-build
                  artifacts: "enterprise-chart/*.json"
                  artifactContentType: "tgz"
                  replacesArtifacts: true
                  allowUpdates: true
                  generateReleaseNotes: true
                  token: ${{ secrets.GITHUB_TOKEN }}
